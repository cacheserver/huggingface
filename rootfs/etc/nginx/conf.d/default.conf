# Disable server token
server_tokens off;

# DNS Resolver (with IPv6 disabled)
resolver 127.0.0.11 ipv6=off valid=30s;

proxy_cache_path /var/lib/huggingface
    keys_zone=huggingface:10m
    levels=2:2
    inactive=3650d
    max_size=100g
    min_free=10g
    loader_files=64
    loader_sleep=50ms
    loader_threshold=300ms
    use_temp_path=off;

log_format cachelog '$time_local [request]: $remote_addr - $remote_user "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$upstream_cache_status"';

# URI paths to avoid cache
# These paths will change to indicate new release contents
# All other .deb files can be cached nearly indefinitely, as the
# version number is coded into the file name.
map $request_uri $cache_bypass {
    default 0;
}

# Hugging Face - The AI community building the future.
server {
    listen 80;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Upstream Configuration
    proxy_next_upstream error timeout http_404;
    proxy_redirect off;
    proxy_ssl_server_name on;

    # Handle /<repo>/resolve/<branch>/model.safetensors requests
    location ~ ^/(.*)/resolve/(.*)\.safetensors$ {
        proxy_pass https://huggingface.co;
        proxy_set_header Host "huggingface.co";

        # Allow redirects
        proxy_redirect default;

        # Intercept and override redirects
        proxy_intercept_errors on;
        error_page 301 302 = @handle_safetensors_redirect;
    }
    location @handle_safetensors_redirect {
        internal;
        
        # Extract the original Location header from upstream response
        set $target_location_scheme "";
        set $target_location_host "";
        set $new_location $upstream_http_location;

        # Replace original domain with custom domain
        # https://cdn-lfs-us-1.hf.co/ -> http://your-nginx-server/
        if ($new_location ~* ^(https?):\/\/(cdn-.*\.hf\.co)\/(.*)) {
            set $target_location_scheme $1;
            set $target_location_host $2;
            set $new_location http://127.0.0.1:36081/$3;
        }

        # Return a rewritten redirect response
        add_header Location $new_location;
        add_header X-Target-Location-Scheme $target_location_scheme;
        add_header X-Target-Location-Host $target_location_host;
        return 302;
    }

    location / {
        set $backend "https://huggingface.co";
        proxy_pass $backend;
        proxy_set_header Host "huggingface.co";
    }
}


# Hugging Face - The AI community building the future.
server {
    listen 81;

    access_log /var/log/nginx/access.log cachelog;
    error_log /var/log/nginx/error.log;

    # Cache configuration
    slice 1m;
    proxy_cache_key $http_host$uri$slice_range;
    proxy_cache_valid 200 206 7d;
    proxy_cache_valid 301 302 0;
    proxy_set_header Range $slice_range;
    proxy_cache_lock on;
    proxy_cache_lock_age 2m;
    proxy_cache_lock_timeout 1h;
    proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    proxy_cache_revalidate on;

    # Nocache for those entries
    proxy_no_cache $cache_bypass;
    proxy_cache_bypass $cache_bypass;
    proxy_max_temp_file_size 10000m;

    # Cache status
    add_header X-Cache-Status $upstream_cache_status;
    proxy_ignore_headers Expires Cache-Control;
    proxy_ignore_client_abort on;

    # Upstream Configuration
    proxy_next_upstream error timeout http_404;
    proxy_redirect off;
    proxy_ssl_server_name on;

    location / {
        proxy_cache huggingface;
        proxy_pass_request_headers on;

        set $target_location_scheme "https";
        set $target_location_host   "cdn-lfs.hf.co";
        if ($upstream_http_x_target_location) {
            set $target_location_host $upstream_http_x_target_location;
        }

        proxy_pass "${target_location_scheme}://${target_location_host}";
        proxy_set_header Host "${target_location_host}";

        # Set the Origin header to the custom domain
        proxy_set_header Origin "${target_location_scheme}://${target_location_host}";
        proxy_hide_header Referer;
        proxy_hide_header Server;
    }
}
