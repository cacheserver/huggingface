# Disable server token
server_tokens off;

# DNS Resolver (with IPv6 disabled)
resolver 127.0.0.11 ipv6=off valid=30s;

proxy_cache_path /var/lib/huggingface
    keys_zone=huggingface:10m
    levels=2:2
    inactive=30d
    max_size=100g
    min_free=10g
    loader_files=64
    loader_sleep=50ms
    loader_threshold=300ms
    use_temp_path=off;

log_format cachelog '$time_local [request]: $remote_addr - $upstream_addr "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$upstream_cache_status"';

# URI paths to avoid cache
# These paths will change to indicate new release contents
# All other .deb files can be cached nearly indefinitely, as the
# version number is coded into the file name.
map $request_uri $cache_bypass {
    default 0;
}

# Hugging Face - The AI community building the future.
server {
    listen 36080;

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Upstream Configuration
    proxy_next_upstream error timeout http_404;
    proxy_ssl_server_name on;

    # Handle /<owner>/<repo>/resolve/<branch>/<files> requests
    location ~ ^/(.*)/resolve/(.*)$ {
        set $backend "https://huggingface.co";
        proxy_pass $backend;
        proxy_set_header Host "huggingface.co";

        # Intercept and override redirects
        proxy_intercept_errors on;
        error_page 301 302 = @handle_huggingface_cdn_redirect;
    }
    location @handle_huggingface_cdn_redirect {
        internal;

        # Preserve all original headers
        add_header Cache-Control $upstream_http_cache_control always;
        add_header Content-Type $upstream_http_content_type always;
        add_header Set-Cookie $upstream_http_set_cookie always;
        add_header X-Original-Location $upstream_http_location always;  # Debugging

        # Additional headers to preserve
        # add_header Access-Control-Allow-Origin $upstream_http_access_control_allow_origin always; # You will get 403, if you enable this
        add_header Access-Control-Expose-Headers $upstream_http_access_control_expose_headers always;
        add_header Accept-Ranges $upstream_http_accept_ranges always;
        add_header Vary $upstream_http_vary always;
        add_header Via $upstream_http_via always;
        add_header X-Cache $upstream_http_x_cache always;
        add_header X-Linked-Size $upstream_http_x_linked_size always;
        add_header X-Linked-Etag $upstream_http_x_linked_etag always;
        add_header X-Request-Id $upstream_http_x_request_id always;
        add_header X-Repo-Commit $upstream_http_x_repo_commit always;
        add_header X-Amz-Cf-Pop $upstream_http_x_amz_cf_pop always;
        add_header X-Amz-Cf-Id $upstream_http_x_amz_cf_id always;

        # Return a rewritten redirect response
        add_header Location /-/huggingface/$upstream_http_location always;
        return 302 /-/huggingface/$upstream_http_location;
    }

    # Huggingface CDN Proxy
    location ^~ /-/huggingface/ {
        proxy_cache huggingface;

        set $huggingface_cdn_scheme     $scheme;
        set $huggingface_cdn_host       "cdn-lfs.hf.co";
        set $huggingface_cdn_request_uri    $request_uri;

        # Extract the scheme, host and request URI from the request to Huggingface CDN
        if ($request_uri ~* "^/-/huggingface/(https?)://([^/]+)(/.*)$") {
            set $huggingface_cdn_scheme $1;
            set $huggingface_cdn_host $2;
            set $huggingface_cdn_request_uri $3;
        }
        add_header X-Huggingface-CDN-Scheme $huggingface_cdn_scheme always;  # Debugging
        add_header X-Huggingface-CDN-Host $huggingface_cdn_host always;  # Debugging

        # Clean the URI for cache key
        set $cleaned_uri $uri;
        if ($uri ~* "^/-/huggingface/(https?):/([^/]+)(/.*)$") {
            set $cleaned_uri $3;
        }

        # Rewrite the request to remove the /-/huggingface/<target> prefix
        rewrite ^/-/huggingface/(https?)://([^/]+)(/.*)$ $3 break;

        # Cache configuration
        slice 64m;
        proxy_cache_key "${huggingface_cdn_host}${cleaned_uri}${slice_range}";
        add_header X-Cache-Key "${huggingface_cdn_host}${cleaned_uri}${slice_range}";
        proxy_cache_valid 200 206 7d;
        proxy_cache_valid 301 302 0;
        proxy_set_header Range $slice_range;
        proxy_cache_lock on;
        proxy_cache_lock_age 2m;
        proxy_cache_lock_timeout 1h;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_revalidate on;

        # Nocache for those entries
        proxy_no_cache $cache_bypass;
        proxy_cache_bypass $cache_bypass;
        proxy_max_temp_file_size 512m;

        # Cache status
        add_header X-Cache-Status $upstream_cache_status;
        proxy_ignore_headers Expires Cache-Control;
        proxy_ignore_client_abort on;

        # Buffering configuration
        proxy_buffering      on;
        proxy_buffer_size    128k;
        proxy_buffers        4 256k;

        # Due to the size of the files, we need to increase the timeouts
        proxy_read_timeout   24h;
        proxy_send_timeout   24h;

        proxy_pass "${huggingface_cdn_scheme}://${huggingface_cdn_host}${huggingface_cdn_request_uri}";
        proxy_set_header Host "${huggingface_cdn_host}";
    }

    # location / {
    #     set $backend "https://huggingface.co";
    #     proxy_pass $backend;
    #     proxy_set_header Host "huggingface.co";
    # }
}
